언어모드 선택 : 컨 k 떼고 m

---

"Ctrl + M"키를 누르면 탭키가 커서를 뒤로 미는 기능이 아닌,포커스를 이리저리 옮기는 기능으로 변경된다.

---

def ajax_user_id(request):
    form = email_form(request.POST)
    if form.is_valid():
        email_object = form.cleaned_data.get('email')
        qs = User.objects.filter(email = email_object).first()
        get_id = qs.username
        print(get_id)
        data = {'get_id' : get_id}
        return render(request, 'common/find_user.html', data)

{% if get_id %}
<div>당신이 찾던 바로 그 아이디 : {{get_id}}</div>

{% endif %}

---

var temp = document.getElementById('temp');
var temp = $('#temp');
위의 두 코드는 각각 다른 객체를 반환한다.
document.getElementById('temp');는 HTML DOM 객체를 리턴하고,
$('#temp'); 는 jQuery 객체를 리턴한다.
따라서, HTML DOM 객체를 사용해야 하는 경우에는,
$('#temp')[0]로 jQuery 객체의 첫 번째 element를 불러와야 HTML DOM 객체로 활용할 수 있다.

---

pip 명령어 에러 해결 : Faltal error in launcher: Unable to create process using '"'
pip 명령어 앞에 python -m 을 붙여준다.

---

"npx tail 
windcss -i ./base/static/style.css -o ./base/static/output_style.css --watch",
테일윈드와 같은 폴더가 루트 기준임

npx = Node Package Execution
npm : Node Package Manager

---

<form action="{%url 'common:ajax_user_id'%}" method="post">
    {% csrf_token %}
    <div class="backcolor">
        <label for="email">이메일 주소</label>
        <input type="text" name="email" id="email" value="{{ form.email.value|default_if_none:'' }}">
    <button type="submit">아이디를 찾아주세요</button>
    </div>

</form>

---

# IMAP(Internet Messaging Access Protocol) // MAP (인터넷 메시지 액세스 프로토콜)은 수신자 측에서 해당 메일을 검색하는 데 사용
- IMAP 계정을 사용하면 메시지가 원격 서버에 저장됩니다. 
- 사용자는 컴퓨터나 모바일 장치에서 여러 전자 메일 클라이언트를 통해 로그인하여 동일한 메시지를 읽을 수 있습니다. 
- 사서함의 모든 변경 내용은 여러 장치에서 동기화되고 사용자가 전자 메일을 삭제하는 경우에만 서버에서 메시지가 제거됩니다.
- PC나 모바일에서 메일을 확인할 때 서버에 저장된 정보를 가져와서 내용을 보여주고 변경 사항을 동기화


# SMTP : SMTP (Simple Mail Transfer Protocol) //  SMTP는 푸시 프로토콜이며 메일을 보내는 데 사용
- SMTP는 응용 프로그램 계층 프로토콜입니다. 메일을 보내려는 클라이언트는 SMTP 서버에 대한 TCP 연결을 열고 연결을 통해 메일을 보냅니다. 
- SMTP 서버는 항상 수신 대기 모드입니다. 클라이언트의 TCP 연결을 수신하는 즉시 SMTP 프로
​

# Setting 에 아래 기입
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# Email 전송
# 메일을 호스트하는 서버
EMAIL_HOST = 'smtp.naver.com'
# gmail과의 통신하는 포트
EMAIL_PORT = '587'
# 발신할 이메일
# EMAIL_HOST_USER = '구글아이디@gmail.com'
EMAIL_HOST_USER = 'yoo0025@naver.com'
# 발신할 메일의 비밀번호
# EMAIL_HOST_PASSWORD = '구글비밀번호'
EMAIL_HOST_PASSWORD = 'whzhqlcl1!'
# TLS 보안 방법
EMAIL_USE_TLS = True
# 사이트와 관련한 자동응답을 받을 이메일 주소
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

---

파이썬에서 정규 표현식을 작성할 때는 앞에 r을 항상 붙인다.
이는 파이썬에게는 별 의미가 없지만, 파이썬에게 문자열에 특수 문자가 있다는 것을 알려준다.

---

Django는 정확한 템플릿과 오류를 일으키는 라인을 보여줍니다. 
해당 행을 {% url 'password_reset_confirm' %}에서 {% url 'accounts:password_reset_confirm' %}로 수정하기만 하면 됩니다.

---

Error Reverse for 'password_reset_done' not found. 'password_reset_done' is not a valid view function or pattern name.
> app_name이 아닌 기본 urls.py에서 path('', include('django.contrib.auth.urls'))를 사용하면 작동합니다.

---

pip install PIL
PIL 설치 오류시
pip install Pillow

---

*args와 **kwargs 모두 가변인자를 위한 변수다.
*args는 인자의 값이 튜플 형태로 저장된다.
**kwargs는 인자의 값이 딕셔너리 형태로 저장된다.

---

__init__ 메서드는 james = Person()처럼 클래스에 ( )(괄호)를 붙여서 인스턴스를 만들 때 호출되는 특별한 메서드입니다. 
즉, __init__(initialize)이라는 이름 그대로 인스턴스(객체)를 초기화합니다.

---

assert [조건], [오류메시지]
assert 키워드 뒤에 [조건]을 입력하고 그 뒤에 콤마(,) [오류메시지]
[조건] : 이 조건이 True이면 그대로 코드가 진행되고, False라면 AssertionError가 발생합니다. 
[오류메시지] : 앞에 조건이 False인 경우 "AssertionError와 함께 남길 메시지" 입니다. 이 부분은 생략이 가능합니다. 

---

처음 생각한 채팅방 리스트 컨셉(메모리)
```
global_room = []


class append_room:
    count = 0
    def __init__(self, room_name):
        global_room.append(room_name)
    
class remove_room:
    def __init__(self, room_name):
        global_room.remove(room_name)

///

class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = 'chatting_%s' % self.room_name 
        # Join room group
        await self.channel_layer.group_add(
            self.room_group_name,
            self.channel_name
        )

        session = self.scope["session"]
        if self.room_group_name not in global_room:
            append_room(self.room_group_name)

        print('리스트 > ', global_room)
        print('채널레이어 : ', self.channel_layer)
```

---

비동기 함수는 일반적으로 async로 선언된 다른 비동기 함수 내에서 await 키워드를 붙여서 호출해야 합니다.

---

선택적으로 데이터베이스의 방에 연결된 사용자를 유지할 수 있습니다.
방을 만들고 연결 시 사용자를 추가하고 연결 해제 시 사용자를 제거합니다.

```
from django.db import models
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async


# ./models
class Room(models.Model):
    room_name = models.CharField(max_length=150, unique=True)
    users = models.ManyToManyField(get_user_model(), related_name='rooms')

    @classmethod
    @sync_to_async
    def add(cls, room_name, user):
        room, created = cls.objects.get_or_create(room_name=room_name)
        room.users.add(user)
        return created # sockets => join or create



    @classmethod
    @sync_to_async
    def users_count(cls, room_name):
        rooms = cls.objects.filter(room_name=room_name)
        if rooms.exists():
            return rooms.first().users.count()
        return 0

    @classmethod
    @sync_to_async
    def remove_user(cls, user, room_name):
        room = cls.objects.filter(room_name=room_name)
        if room.exists():
            room.users.remove(user)


# ./consumer.py
class YourConsumer(AsyncWebsocketConsumer):

    async def connect(self):
        self.room_name = self.scope['url_route']['kwargs']['room_name']
        self.room_group_name = 'video_%s' % self.room_name
        self.group_users = {self.scope.get('user').id: 1}

        if self.scope.get('user').is_authenticated:
            room = await Room.add(self.room_name, self.scope.get('user'))

        await self.channel_layer.group_add(
            self.room_name,
            self.channel_name
        )

        await self.accept()

    async def disconnect(self, code):
        # Leave room group
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )
        if self.scope.get('user').is_authenticated:
            await Room.remove_user(self.room_name, self.scope.get('user'))

    async def websocket_receive(self, message):
        count = await Room.users_count(room_name=self.room_name)
        await self.send(json.dumps({
            'type': 'websocket.send',
            'text': 'pong',
            'group': self.room_group_name,
            'room': self.room_name,
            'connections': count
        }))

```

---

Django ORM 은 Sync로 작동합니다. 그래서 Async로 작동하게 만들려면 기존 방법과는 다르게 해야 합니다.
Django에서 그래서 마법같이 만들낸 것이 sync_to_async 입니다.
함수로도 사용할 수 있고 데코레이터로 사용할 수도 있습니다.
asyncio로 작동하기 때문에 sync_function 안에서는 await를 사용할 수 없습니다. 
그냥 sync로 코딩하시면 해당 함수가 async로 작동하기 때문에 Django ORM도 편하게 사용하실 수 있습니다. 

---
스태틱 메서드, 클래스 메서드.
타입형

class People:
   def __init__(self, name=""):
      self.name = name

   def get_name(self):
       print(type(self))
       return self.name
   def set_name(self, name):
       self.name = name

   aaa = ""
   @staticmethod
   def set_aaa(aaa):
       People.aaa = aaa
   @staticmethod
   def get_aaa():
      return People.aaa

p = People()
p2 =People()

p.set_name("aaa")
p2.set_name("bbb")

p.set_aaa('ccc')
p.aaa = "ddd"

print(p.get_name())
print(p2.get_name())

print(p2.get_aaa())

---

li 태그의 value는 number만 가능하다고함

---

클래스(틀) > 인스턴스 = 객체(OPP계열) [메모리 할당]

this(c, c++, java 예약어) = self(파이썬 커스텀)

static 관련 메모리는 따로 설정된다.

프로세스 구조
heap = [new object, instance]
static = [v, f, cv, cf]
stack = [local value]

primitive
reference

scope = 범위. c++ 에서는 ::로 표현한다.

classmethod 는 함수 사용시 해당 클래스를 매개체로(cls) 넘겨주고 사용한다.
    @classmethod
    @sync_to_async
    def add(cls, room_name, user):
        room, created = cls.objects.get_or_create(room_name=room_name) # 두개의 변수에 리턴값을 할당한다
        room.users.add(user)
        return created # sockets => join or create

cls = '틀'에 대해 참고한다.
staticmethod 는 어떤 클래스였는지 함수상 확실히 명시하여 사용한다.
   @staticmethod
   def set_aaa(aaa):
       People.aaa = aaa

self = 인스턴스에 대해 참고한다.

---
# 쿼리스트링 타입 문제

Room.objects.get(room_name=room_name)



    user_str_objects = map(str, user_objects)

        for user in user_objects:
        print(type(user))

---

                <li><form action="{%url 'chat:kick_user' room_name='dd'%}" method="post">

---

         # print('user list : ', users.values()) 
         # ㄴ 조인 관계형 필드의 콘솔 조회는 1. 원래 테이블에서 필터링 > 2. 필터링 된 테이블에서 get > 3. 가져온 쿼리스트링에 .values() 적용하여 보자!